rownames(x)<-vars1
vars1<-c("T","f","v","g")
rownames(x)<-vars1
View(x)
a<-c(1,3,4,5)
b<-c(2,4,5,6)
c<-c(3,6,7,8)
x<-data.frame(a,b,c)
View(x)
vars<-c("timestart","timeFinish","timeeDuration")
vars1<-c("T","f","v","g")
colnames(x)<-vars
rownames(x)<-vars1
View(x)
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors =FALSE )
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
select(cran)
select()
info()
select(dplyr)
select(x)
select(cran)
info()
info()
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:counry)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
se
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="seirl")
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,country=="IN",r_version<="3.0.2")
filter(cran,country=="US"|country="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
fliter
filter(cran,!is.na(r_version))
info()
play()
filter(cran,r_version!="NA")
filter(cran,!is.na(r_version))
net()
nxt()
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_gb=size_mb/2^10)
play()
cran3
nxt()
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size)
mutate(cran3,correct_size=size+1000)
summary(cran,avg_bytes=mean(size))
summarize(cran,avg_bytes=mean(size))
swirl()
swirl()
file<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
stewd("D:\\coursera\\Getting and Cleaning Data")
download.file(file,destfile = "./2006micodata.csv",method = "curl")
download.file(file,destfile = "./2006micodata.csv",method = "curl")
stewd("D:\\coursera\\Getting and Cleaning Data")
file<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
setwd("D:\\coursera\\Getting and Cleaning Data")
file<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(file,destfile = "./2006micodata.csv",method = "curl")
mydata<-read.table("getdata-data-ss06hid.csv",header = FALSE,sep = ",")
str(mydata)
View(mydata)
selcet(mydata,v37>=$1000000)
selcet(mydata,v37>="$1000000")
as.data.frame(mydata)
class(mydata)
mydata$v37
summaries(mydata$v37)
summary(mydata$v37)
setwd("D:\\coursera\\Getting and Cleaning Data")
mydata<-read.table("getdata-data-ss06hid.csv",header = FALSE,sep = ",")
str(mydata)
class(mydata)
summary(mydata$v37)
summary(mydata)
str(mydata)
mydata$V37
select(mydata,mydata$V37>="01")
mydata$V37
summary(mydata$V37)
mydata$FES
mydata$41
mydata$V41
sumnmary(mydata$V41)
summary(mydata$V41)
library(xls2)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
dat<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = "NGAP Sample Data",header = TRUE)
dat<-dat[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm = T)
install.packages("XML")
library(XML)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternalNodes = TRUE)
?xmlTreeParse
doc<-xmlTreeParse(fileurl,useInternal= TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal= TRUE)
library(XML)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal= TRUE)
library(XML)
a<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
c<-xmlTreeParse(a,useInternal=TRUE )
c<-xmlTreeParse(sub("s", "", a),,useInternal=TRUE )
summary(c)
c$zipcode
class(c)
xmlRoot(c)
xmlName(xmlRoot(c))
d<-c$zipcode
d<-xmlRoot(c)
names(d)
xpathApply(d,"//zipcode",xmlValue)
sum(xpathApply(d,"//zipcode",xmlValue)==21231)
c<-xmlTreeParse(sub("s", "", a),useInternal=TRUE )
install.packages("data.table")
library(data.table)
DT<-fread("getdata-data-ss06pid.csv")
library(XML)
a<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
c<-xmlTreeParse(sub("s", "", a),useInternal=TRUE )
c$zipcode
d<-xmlRoot(c)
names(d)
sum(xpathApply(d,"//zipcode",xmlValue)==21231)
mydata<-read.table("getdata-data-ss06hid.csv",header = TRUE,ssep = ",")
mydata<-read.table("getdata-data-ss06hid.csv",header = TRUE,sep = ",")
summary(mydata)
summary(mydata$VAL)
mydata$VAL
mydata$VAL==24
select(mydata,VAL==24)
summarise(mydata$VAL)
mydata$VAL
sum(mydata$VAL==24)
sum(mydata$VAL=="24")
mydata$VAL=="24"
View(mydata)
count(mydata$VAL=="24")
str(mydata$VAL=="24")
str(mydata$VAL)
class(mydata$VAL)
if(mydata$VAL==24){sum=i+;i=o}
if(mydata$VAL==24){sum=i+,i=o}
if(mydata$VAL==24){sum=i+1,i=o}
if(mydata$VAL==24){sum=i+1}
if(mydata$VAL==24){sum=i+1,i<-0}
if(mydata$VAL==24){sum<-i+1;i<-0}
mydata$VAL==24
summary(mydata$VAL==24)
dat<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = "NGAP Sample Data",header = TRUE)
dat<-dat[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = "NGAP Sample Data",header = TRUE)
datdat<-dat[18:23,7:15]
dat
View(dat)
mydata$FES
dat<-dat[18:23,7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
colindex<-7:15
rowindex<-18:23
dat<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = "NGAP Sample Data",header = TRUE,colIndex = colindex,rowIndex = rowindex)
sum(dat$Zip*dat$Ext,na.rm=T)
swirl()
library(dplyr)
tbl_df()
tbl_df(cran)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarise(by_package)
summarize(by_package,mean(size))
?n
?n_distinct
submit()
submit()
reset()
submit
submit()
submit()
?n_distinct
class(ip_id)
class(by_package$ip_id)
?summarize
submit()
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count =n(),
unique =n(ip_id),
countries =n(country),
avg_bytes = mean(size))
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count =n(),
unique =n_distinct(ip_id),
countries =n_distinct(country),
avg_bytes = mean(size))
submit()
View(by_package)
class(by_package$country)
?summarise
?summarize
?summarise
?summarize
?n_distinct
?n
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count =n(),
unique =n_distinct(ip_id),
countries =n_distinct(country),
avg_bytes = mean(size))
pack_sum
quantile(pack_sum$count, probs = 0.99)
View(pack_sum)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique()))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id) %>%
select(country)%>%
select(package)%>%
select(size)%>%
print
select(ip_id,country,package,size) %>%
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id,country,package,size) %>%
print
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id) %>%
print%>%
select(country) %>%
print%>%
select(package) %>%
print%>%
select(size) %>%
print
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id,country,package,size) %>%
print#%>%
#select(country) %>%
#print%>%
#select(package) %>%
#print%>%
#select(size) %>%
#print
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id,country,package,size) %>%
print
info()
main()
info()
skip()
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id,country,package,size) %>%
print
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate()
info()
play()
nxt()
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb<-size/2^20)%<%
print
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb<-size/2^20)%>%
print
swirl()
submit()
# Use mutate() to add a column called size_mb that contains
# the size of each download in megabytes (i.e. size / 2^20).
#
# If you want your results printed to the console, add
# print to the end of your chain.
cran %>%
select(ip_id, country, package, size) %>%
mutate()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
play()
?mutate
nxt()
submit()
submit()
submit()
